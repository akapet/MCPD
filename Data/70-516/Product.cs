//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace _70_516
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Category))]
    [KnownType(typeof(Order_Detail))]
    [KnownType(typeof(Supplier))]
    public partial class Product: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private int _productID;
    
        [DataMember]
        public string ProductName
        {
            get { return _productName; }
            set
            {
                if (_productName != value)
                {
                    _productName = value;
                    OnPropertyChanged("ProductName");
                }
            }
        }
        private string _productName;
    
        [DataMember]
        public Nullable<int> SupplierID
        {
            get { return _supplierID; }
            set
            {
                if (_supplierID != value)
                {
                    ChangeTracker.RecordOriginalValue("SupplierID", _supplierID);
                    if (!IsDeserializing)
                    {
                        if (Supplier != null && Supplier.SupplierID != value)
                        {
                            Supplier = null;
                        }
                    }
                    _supplierID = value;
                    OnPropertyChanged("SupplierID");
                }
            }
        }
        private Nullable<int> _supplierID;
    
        [DataMember]
        public Nullable<int> CategoryID
        {
            get { return _categoryID; }
            set
            {
                if (_categoryID != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoryID", _categoryID);
                    if (!IsDeserializing)
                    {
                        if (Category != null && Category.CategoryID != value)
                        {
                            Category = null;
                        }
                    }
                    _categoryID = value;
                    OnPropertyChanged("CategoryID");
                }
            }
        }
        private Nullable<int> _categoryID;
    
        [DataMember]
        public string QuantityPerUnit
        {
            get { return _quantityPerUnit; }
            set
            {
                if (_quantityPerUnit != value)
                {
                    _quantityPerUnit = value;
                    OnPropertyChanged("QuantityPerUnit");
                }
            }
        }
        private string _quantityPerUnit;
    
        [DataMember]
        public Nullable<decimal> UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value;
                    OnPropertyChanged("UnitPrice");
                }
            }
        }
        private Nullable<decimal> _unitPrice;
    
        [DataMember]
        public Nullable<short> UnitsInStock
        {
            get { return _unitsInStock; }
            set
            {
                if (_unitsInStock != value)
                {
                    _unitsInStock = value;
                    OnPropertyChanged("UnitsInStock");
                }
            }
        }
        private Nullable<short> _unitsInStock;
    
        [DataMember]
        public Nullable<short> UnitsOnOrder
        {
            get { return _unitsOnOrder; }
            set
            {
                if (_unitsOnOrder != value)
                {
                    _unitsOnOrder = value;
                    OnPropertyChanged("UnitsOnOrder");
                }
            }
        }
        private Nullable<short> _unitsOnOrder;
    
        [DataMember]
        public Nullable<short> ReorderLevel
        {
            get { return _reorderLevel; }
            set
            {
                if (_reorderLevel != value)
                {
                    _reorderLevel = value;
                    OnPropertyChanged("ReorderLevel");
                }
            }
        }
        private Nullable<short> _reorderLevel;
    
        [DataMember]
        public bool Discontinued
        {
            get { return _discontinued; }
            set
            {
                if (_discontinued != value)
                {
                    _discontinued = value;
                    OnPropertyChanged("Discontinued");
                }
            }
        }
        private bool _discontinued;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Category Category
        {
            get { return _category; }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                    OnNavigationPropertyChanged("Category");
                }
            }
        }
        private Category _category;
    
        [DataMember]
        public TrackableCollection<Order_Detail> Order_Details
        {
            get
            {
                if (_order_Details == null)
                {
                    _order_Details = new TrackableCollection<Order_Detail>();
                    _order_Details.CollectionChanged += FixupOrder_Details;
                }
                return _order_Details;
            }
            set
            {
                if (!ReferenceEquals(_order_Details, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_order_Details != null)
                    {
                        _order_Details.CollectionChanged -= FixupOrder_Details;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Order_Detail item in _order_Details)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _order_Details = value;
                    if (_order_Details != null)
                    {
                        _order_Details.CollectionChanged += FixupOrder_Details;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Order_Detail item in _order_Details)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Order_Details");
                }
            }
        }
        private TrackableCollection<Order_Detail> _order_Details;
    
        [DataMember]
        public Supplier Supplier
        {
            get { return _supplier; }
            set
            {
                if (!ReferenceEquals(_supplier, value))
                {
                    var previousValue = _supplier;
                    _supplier = value;
                    FixupSupplier(previousValue);
                    OnNavigationPropertyChanged("Supplier");
                }
            }
        }
        private Supplier _supplier;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Category = null;
            Order_Details.Clear();
            Supplier = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCategory(Category previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (Category != null)
            {
                if (!Category.Products.Contains(this))
                {
                    Category.Products.Add(this);
                }
    
                CategoryID = Category.CategoryID;
            }
            else if (!skipKeys)
            {
                CategoryID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Category")
                    && (ChangeTracker.OriginalValues["Category"] == Category))
                {
                    ChangeTracker.OriginalValues.Remove("Category");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Category", previousValue);
                }
                if (Category != null && !Category.ChangeTracker.ChangeTrackingEnabled)
                {
                    Category.StartTracking();
                }
            }
        }
    
        private void FixupSupplier(Supplier previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (Supplier != null)
            {
                if (!Supplier.Products.Contains(this))
                {
                    Supplier.Products.Add(this);
                }
    
                SupplierID = Supplier.SupplierID;
            }
            else if (!skipKeys)
            {
                SupplierID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Supplier")
                    && (ChangeTracker.OriginalValues["Supplier"] == Supplier))
                {
                    ChangeTracker.OriginalValues.Remove("Supplier");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Supplier", previousValue);
                }
                if (Supplier != null && !Supplier.ChangeTracker.ChangeTrackingEnabled)
                {
                    Supplier.StartTracking();
                }
            }
        }
    
        private void FixupOrder_Details(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Order_Detail item in e.NewItems)
                {
                    item.Product = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Order_Details", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order_Detail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Order_Details", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
