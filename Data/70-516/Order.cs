//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace _70_516
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Employee))]
    [KnownType(typeof(Order_Detail))]
    [KnownType(typeof(Shipper))]
    public partial class Order: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _orderID = value;
                    OnPropertyChanged("OrderID");
                }
            }
        }
        private int _orderID;
    
        [DataMember]
        public string CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerID", _customerID);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.CustomerID != value)
                        {
                            Customer = null;
                        }
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private string _customerID;
    
        [DataMember]
        public Nullable<int> EmployeeID
        {
            get { return _employeeID; }
            set
            {
                if (_employeeID != value)
                {
                    ChangeTracker.RecordOriginalValue("EmployeeID", _employeeID);
                    if (!IsDeserializing)
                    {
                        if (Employee != null && Employee.EmployeeID != value)
                        {
                            Employee = null;
                        }
                    }
                    _employeeID = value;
                    OnPropertyChanged("EmployeeID");
                }
            }
        }
        private Nullable<int> _employeeID;
    
        [DataMember]
        public Nullable<System.DateTime> OrderDate
        {
            get { return _orderDate; }
            set
            {
                if (_orderDate != value)
                {
                    _orderDate = value;
                    OnPropertyChanged("OrderDate");
                }
            }
        }
        private Nullable<System.DateTime> _orderDate;
    
        [DataMember]
        public Nullable<System.DateTime> RequiredDate
        {
            get { return _requiredDate; }
            set
            {
                if (_requiredDate != value)
                {
                    _requiredDate = value;
                    OnPropertyChanged("RequiredDate");
                }
            }
        }
        private Nullable<System.DateTime> _requiredDate;
    
        [DataMember]
        public Nullable<System.DateTime> ShippedDate
        {
            get { return _shippedDate; }
            set
            {
                if (_shippedDate != value)
                {
                    _shippedDate = value;
                    OnPropertyChanged("ShippedDate");
                }
            }
        }
        private Nullable<System.DateTime> _shippedDate;
    
        [DataMember]
        public Nullable<int> ShipVia
        {
            get { return _shipVia; }
            set
            {
                if (_shipVia != value)
                {
                    ChangeTracker.RecordOriginalValue("ShipVia", _shipVia);
                    if (!IsDeserializing)
                    {
                        if (Shipper != null && Shipper.ShipperID != value)
                        {
                            Shipper = null;
                        }
                    }
                    _shipVia = value;
                    OnPropertyChanged("ShipVia");
                }
            }
        }
        private Nullable<int> _shipVia;
    
        [DataMember]
        public Nullable<decimal> Freight
        {
            get { return _freight; }
            set
            {
                if (_freight != value)
                {
                    _freight = value;
                    OnPropertyChanged("Freight");
                }
            }
        }
        private Nullable<decimal> _freight;
    
        [DataMember]
        public string ShipName
        {
            get { return _shipName; }
            set
            {
                if (_shipName != value)
                {
                    _shipName = value;
                    OnPropertyChanged("ShipName");
                }
            }
        }
        private string _shipName;
    
        [DataMember]
        public string ShipAddress
        {
            get { return _shipAddress; }
            set
            {
                if (_shipAddress != value)
                {
                    _shipAddress = value;
                    OnPropertyChanged("ShipAddress");
                }
            }
        }
        private string _shipAddress;
    
        [DataMember]
        public string ShipCity
        {
            get { return _shipCity; }
            set
            {
                if (_shipCity != value)
                {
                    _shipCity = value;
                    OnPropertyChanged("ShipCity");
                }
            }
        }
        private string _shipCity;
    
        [DataMember]
        public string ShipRegion
        {
            get { return _shipRegion; }
            set
            {
                if (_shipRegion != value)
                {
                    _shipRegion = value;
                    OnPropertyChanged("ShipRegion");
                }
            }
        }
        private string _shipRegion;
    
        [DataMember]
        public string ShipPostalCode
        {
            get { return _shipPostalCode; }
            set
            {
                if (_shipPostalCode != value)
                {
                    _shipPostalCode = value;
                    OnPropertyChanged("ShipPostalCode");
                }
            }
        }
        private string _shipPostalCode;
    
        [DataMember]
        public string ShipCountry
        {
            get { return _shipCountry; }
            set
            {
                if (_shipCountry != value)
                {
                    _shipCountry = value;
                    OnPropertyChanged("ShipCountry");
                }
            }
        }
        private string _shipCountry;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private Customer _customer;
    
        [DataMember]
        public Employee Employee
        {
            get { return _employee; }
            set
            {
                if (!ReferenceEquals(_employee, value))
                {
                    var previousValue = _employee;
                    _employee = value;
                    FixupEmployee(previousValue);
                    OnNavigationPropertyChanged("Employee");
                }
            }
        }
        private Employee _employee;
    
        [DataMember]
        public TrackableCollection<Order_Detail> Order_Details
        {
            get
            {
                if (_order_Details == null)
                {
                    _order_Details = new TrackableCollection<Order_Detail>();
                    _order_Details.CollectionChanged += FixupOrder_Details;
                }
                return _order_Details;
            }
            set
            {
                if (!ReferenceEquals(_order_Details, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_order_Details != null)
                    {
                        _order_Details.CollectionChanged -= FixupOrder_Details;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (Order_Detail item in _order_Details)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _order_Details = value;
                    if (_order_Details != null)
                    {
                        _order_Details.CollectionChanged += FixupOrder_Details;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (Order_Detail item in _order_Details)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Order_Details");
                }
            }
        }
        private TrackableCollection<Order_Detail> _order_Details;
    
        [DataMember]
        public Shipper Shipper
        {
            get { return _shipper; }
            set
            {
                if (!ReferenceEquals(_shipper, value))
                {
                    var previousValue = _shipper;
                    _shipper = value;
                    FixupShipper(previousValue);
                    OnNavigationPropertyChanged("Shipper");
                }
            }
        }
        private Shipper _shipper;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Customer = null;
            Employee = null;
            Order_Details.Clear();
            Shipper = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCustomer(Customer previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Orders.Contains(this))
                {
                    Customer.Orders.Add(this);
                }
    
                CustomerID = Customer.CustomerID;
            }
            else if (!skipKeys)
            {
                CustomerID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }
    
        private void FixupEmployee(Employee previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Employee != null)
            {
                if (!Employee.Orders.Contains(this))
                {
                    Employee.Orders.Add(this);
                }
    
                EmployeeID = Employee.EmployeeID;
            }
            else if (!skipKeys)
            {
                EmployeeID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Employee")
                    && (ChangeTracker.OriginalValues["Employee"] == Employee))
                {
                    ChangeTracker.OriginalValues.Remove("Employee");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Employee", previousValue);
                }
                if (Employee != null && !Employee.ChangeTracker.ChangeTrackingEnabled)
                {
                    Employee.StartTracking();
                }
            }
        }
    
        private void FixupShipper(Shipper previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Shipper != null)
            {
                if (!Shipper.Orders.Contains(this))
                {
                    Shipper.Orders.Add(this);
                }
    
                ShipVia = Shipper.ShipperID;
            }
            else if (!skipKeys)
            {
                ShipVia = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Shipper")
                    && (ChangeTracker.OriginalValues["Shipper"] == Shipper))
                {
                    ChangeTracker.OriginalValues.Remove("Shipper");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Shipper", previousValue);
                }
                if (Shipper != null && !Shipper.ChangeTracker.ChangeTrackingEnabled)
                {
                    Shipper.StartTracking();
                }
            }
        }
    
        private void FixupOrder_Details(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Order_Detail item in e.NewItems)
                {
                    item.Order = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Order_Details", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order_Detail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Order_Details", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
