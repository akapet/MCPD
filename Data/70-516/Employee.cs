//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace _70_516
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Employee))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(Territory))]
    public partial class Employee: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int EmployeeID
        {
            get { return _employeeID; }
            set
            {
                if (_employeeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'EmployeeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _employeeID = value;
                    OnPropertyChanged("EmployeeID");
                }
            }
        }
        private int _employeeID;
    
        [DataMember]
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        [DataMember]
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string TitleOfCourtesy
        {
            get { return _titleOfCourtesy; }
            set
            {
                if (_titleOfCourtesy != value)
                {
                    _titleOfCourtesy = value;
                    OnPropertyChanged("TitleOfCourtesy");
                }
            }
        }
        private string _titleOfCourtesy;
    
        [DataMember]
        public Nullable<System.DateTime> BirthDate
        {
            get { return _birthDate; }
            set
            {
                if (_birthDate != value)
                {
                    _birthDate = value;
                    OnPropertyChanged("BirthDate");
                }
            }
        }
        private Nullable<System.DateTime> _birthDate;
    
        [DataMember]
        public Nullable<System.DateTime> HireDate
        {
            get { return _hireDate; }
            set
            {
                if (_hireDate != value)
                {
                    _hireDate = value;
                    OnPropertyChanged("HireDate");
                }
            }
        }
        private Nullable<System.DateTime> _hireDate;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    OnPropertyChanged("City");
                }
            }
        }
        private string _city;
    
        [DataMember]
        public string Region
        {
            get { return _region; }
            set
            {
                if (_region != value)
                {
                    _region = value;
                    OnPropertyChanged("Region");
                }
            }
        }
        private string _region;
    
        [DataMember]
        public string PostalCode
        {
            get { return _postalCode; }
            set
            {
                if (_postalCode != value)
                {
                    _postalCode = value;
                    OnPropertyChanged("PostalCode");
                }
            }
        }
        private string _postalCode;
    
        [DataMember]
        public string Country
        {
            get { return _country; }
            set
            {
                if (_country != value)
                {
                    _country = value;
                    OnPropertyChanged("Country");
                }
            }
        }
        private string _country;
    
        [DataMember]
        public string HomePhone
        {
            get { return _homePhone; }
            set
            {
                if (_homePhone != value)
                {
                    _homePhone = value;
                    OnPropertyChanged("HomePhone");
                }
            }
        }
        private string _homePhone;
    
        [DataMember]
        public string Extension
        {
            get { return _extension; }
            set
            {
                if (_extension != value)
                {
                    _extension = value;
                    OnPropertyChanged("Extension");
                }
            }
        }
        private string _extension;
    
        [DataMember]
        public byte[] Photo
        {
            get { return _photo; }
            set
            {
                if (_photo != value)
                {
                    _photo = value;
                    OnPropertyChanged("Photo");
                }
            }
        }
        private byte[] _photo;
    
        [DataMember]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    OnPropertyChanged("Notes");
                }
            }
        }
        private string _notes;
    
        [DataMember]
        public Nullable<int> ReportsTo
        {
            get { return _reportsTo; }
            set
            {
                if (_reportsTo != value)
                {
                    ChangeTracker.RecordOriginalValue("ReportsTo", _reportsTo);
                    if (!IsDeserializing)
                    {
                        if (Employee1 != null && Employee1.EmployeeID != value)
                        {
                            Employee1 = null;
                        }
                    }
                    _reportsTo = value;
                    OnPropertyChanged("ReportsTo");
                }
            }
        }
        private Nullable<int> _reportsTo;
    
        [DataMember]
        public string PhotoPath
        {
            get { return _photoPath; }
            set
            {
                if (_photoPath != value)
                {
                    _photoPath = value;
                    OnPropertyChanged("PhotoPath");
                }
            }
        }
        private string _photoPath;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Employee> Employees1
        {
            get
            {
                if (_employees1 == null)
                {
                    _employees1 = new TrackableCollection<Employee>();
                    _employees1.CollectionChanged += FixupEmployees1;
                }
                return _employees1;
            }
            set
            {
                if (!ReferenceEquals(_employees1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_employees1 != null)
                    {
                        _employees1.CollectionChanged -= FixupEmployees1;
                    }
                    _employees1 = value;
                    if (_employees1 != null)
                    {
                        _employees1.CollectionChanged += FixupEmployees1;
                    }
                    OnNavigationPropertyChanged("Employees1");
                }
            }
        }
        private TrackableCollection<Employee> _employees1;
    
        [DataMember]
        public Employee Employee1
        {
            get { return _employee1; }
            set
            {
                if (!ReferenceEquals(_employee1, value))
                {
                    var previousValue = _employee1;
                    _employee1 = value;
                    FixupEmployee1(previousValue);
                    OnNavigationPropertyChanged("Employee1");
                }
            }
        }
        private Employee _employee1;
    
        [DataMember]
        public TrackableCollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    _orders = new TrackableCollection<Order>();
                    _orders.CollectionChanged += FixupOrders;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_orders != null)
                    {
                        _orders.CollectionChanged -= FixupOrders;
                    }
                    _orders = value;
                    if (_orders != null)
                    {
                        _orders.CollectionChanged += FixupOrders;
                    }
                    OnNavigationPropertyChanged("Orders");
                }
            }
        }
        private TrackableCollection<Order> _orders;
    
        [DataMember]
        public TrackableCollection<Territory> Territories
        {
            get
            {
                if (_territories == null)
                {
                    _territories = new TrackableCollection<Territory>();
                    _territories.CollectionChanged += FixupTerritories;
                }
                return _territories;
            }
            set
            {
                if (!ReferenceEquals(_territories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_territories != null)
                    {
                        _territories.CollectionChanged -= FixupTerritories;
                    }
                    _territories = value;
                    if (_territories != null)
                    {
                        _territories.CollectionChanged += FixupTerritories;
                    }
                    OnNavigationPropertyChanged("Territories");
                }
            }
        }
        private TrackableCollection<Territory> _territories;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Employees1.Clear();
            Employee1 = null;
            Orders.Clear();
            Territories.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupEmployee1(Employee previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Employees1.Contains(this))
            {
                previousValue.Employees1.Remove(this);
            }
    
            if (Employee1 != null)
            {
                if (!Employee1.Employees1.Contains(this))
                {
                    Employee1.Employees1.Add(this);
                }
    
                ReportsTo = Employee1.EmployeeID;
            }
            else if (!skipKeys)
            {
                ReportsTo = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Employee1")
                    && (ChangeTracker.OriginalValues["Employee1"] == Employee1))
                {
                    ChangeTracker.OriginalValues.Remove("Employee1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Employee1", previousValue);
                }
                if (Employee1 != null && !Employee1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Employee1.StartTracking();
                }
            }
        }
    
        private void FixupEmployees1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.Employee1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Employees1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee1, this))
                    {
                        item.Employee1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Employees1", item);
                    }
                }
            }
        }
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    item.Employee = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
                    }
                }
            }
        }
    
        private void FixupTerritories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Territory item in e.NewItems)
                {
                    if (!item.Employees.Contains(this))
                    {
                        item.Employees.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Territories", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Territory item in e.OldItems)
                {
                    if (item.Employees.Contains(this))
                    {
                        item.Employees.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Territories", item);
                    }
                }
            }
        }

        #endregion
    }
}
