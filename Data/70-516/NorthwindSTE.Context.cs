//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace _70_516
{
    public partial class NorthwindEntities : ObjectContext
    {
        public const string ConnectionString = "name=NorthwindEntities";
        public const string ContainerName = "NorthwindEntities";
    
        #region Constructors
    
        public NorthwindEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public NorthwindEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public NorthwindEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<Category> Categories
        {
            get { return _categories  ?? (_categories = CreateObjectSet<Category>("Categories")); }
        }
        private ObjectSet<Category> _categories;
    
        public ObjectSet<CustomerDemographic> CustomerDemographics
        {
            get { return _customerDemographics  ?? (_customerDemographics = CreateObjectSet<CustomerDemographic>("CustomerDemographics")); }
        }
        private ObjectSet<CustomerDemographic> _customerDemographics;
    
        public ObjectSet<Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateObjectSet<Customer>("Customers")); }
        }
        private ObjectSet<Customer> _customers;
    
        public ObjectSet<Employee> Employees
        {
            get { return _employees  ?? (_employees = CreateObjectSet<Employee>("Employees")); }
        }
        private ObjectSet<Employee> _employees;
    
        public ObjectSet<Order_Detail> Order_Details
        {
            get { return _order_Details  ?? (_order_Details = CreateObjectSet<Order_Detail>("Order_Details")); }
        }
        private ObjectSet<Order_Detail> _order_Details;
    
        public ObjectSet<Order> Orders
        {
            get { return _orders  ?? (_orders = CreateObjectSet<Order>("Orders")); }
        }
        private ObjectSet<Order> _orders;
    
        public ObjectSet<Product> Products
        {
            get { return _products  ?? (_products = CreateObjectSet<Product>("Products")); }
        }
        private ObjectSet<Product> _products;
    
        public ObjectSet<Region> Regions
        {
            get { return _regions  ?? (_regions = CreateObjectSet<Region>("Regions")); }
        }
        private ObjectSet<Region> _regions;
    
        public ObjectSet<Shipper> Shippers
        {
            get { return _shippers  ?? (_shippers = CreateObjectSet<Shipper>("Shippers")); }
        }
        private ObjectSet<Shipper> _shippers;
    
        public ObjectSet<Supplier> Suppliers
        {
            get { return _suppliers  ?? (_suppliers = CreateObjectSet<Supplier>("Suppliers")); }
        }
        private ObjectSet<Supplier> _suppliers;
    
        public ObjectSet<Territory> Territories
        {
            get { return _territories  ?? (_territories = CreateObjectSet<Territory>("Territories")); }
        }
        private ObjectSet<Territory> _territories;

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="customerID">No Metadata Documentation available.</param>
        public virtual int CustOrderHist(string customerID)
        {
    
            ObjectParameter customerIDParameter;
    
            if (customerID != null)
            {
                customerIDParameter = new ObjectParameter("CustomerID", customerID);
            }
            else
            {
                customerIDParameter = new ObjectParameter("CustomerID", typeof(string));
            }
            return base.ExecuteFunction("CustOrderHist", customerIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="orderID">No Metadata Documentation available.</param>
        public virtual int CustOrdersDetail(Nullable<int> orderID)
        {
    
            ObjectParameter orderIDParameter;
    
            if (orderID.HasValue)
            {
                orderIDParameter = new ObjectParameter("OrderID", orderID);
            }
            else
            {
                orderIDParameter = new ObjectParameter("OrderID", typeof(int));
            }
            return base.ExecuteFunction("CustOrdersDetail", orderIDParameter);
        }

        #endregion
    }
}
